swagger: '2.0'
info:
  description: >-
    An active cyber defense development framework enabling orchestration
    capabilities to be written once and deployed across WALKOFF-enabled
    orchestration tools. https://iadgov.github.io/WALKOFF/
  version: 0.5.0
  title: WALKOFF
  contact:
    email: walkoff@nsa.gov
  license:
    name: Creative-Commons
    url: 'http://creativecommons.org/licenses/by/4.0/'

tags:
  - name: Authorization
    description: Authorization Operations
  - name: Apps
    description: App Management Operations
  - name: Cases
    description: WALKOFF logging and case management operations
  - name: Subscriptions
    description: WALKOFF case subscription operations
  - name: Configuration
    description: System Configuration Operations
  - name: Devices
    description: Device Operations
  - name: Users
    description: User operations
  - name: Roles
    description: Role Operations
  - name: Metrics
    description: Metric Operations
  - name: Playbooks
    description: Playbook Operations
  - name: Workflows
    description: Workflow Operations
  - name: Events
    description: Event Operations
  - name: Scheduler
    description: Scheduler Operations
  - name: Triggers
    description: Trigger Operations
  - name: System
    description: System Operations
  - name: Client
    description: Serves up client pages

schemes:
  - http
  - https

paths:
  /api/apps:
    get:
      tags:
        - System
      summary: Gets all apps
      description: ''
      operationId: server.endpoints.appapi.read_all_apps
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            description: List of app names
            items:
              type: string
              example: [PhillipsHue, OpenDaylight, PaloAlto]
  
  /api/apps/apis:
    get:
      tags:
        - Apps
      summary: Get all app apis
      description: ''
      operationId: server.endpoints.appapi.read_all_app_apis
      produces:
        - application/json
      parameters:
        - name: field_name
          in: query
          description: The name of the field of the api to get for all apps
          required: false
          type: string
          enum: [info, action_apis, condition_apis, transform_apis, device_apis, tags, external_docs]
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: object
  
  /api/apps/apis/{app_name}:
    get:
      tags:
        - Apps
      summary: Get and app's api
      description: ''
      operationId: server.endpoints.appapi.read_app_api
      produces:
        - application/json
      parameters:
        - name: app_name
          in: path
          description: The name of the app to get
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/AppApi'
        461:
          description: App does not exist
          schema:
            $ref: '#/definitions/Error'
  
  /api/apps/apis/{app_name}/{field_name}:
    get:
      tags:
        - Apps
      summary: Get a field of an app's api
      description: ''
      operationId: server.endpoints.appapi.read_app_api_field
      produces:
        - application/json
      parameters:
        - name: app_name
          in: path
          description: The name of the app to get
          required: true
          type: string
        - name: field_name
          in: path
          description: The name of the field in the app api to get
          required: true
          type: string
          enum: [info, action_apis, condition_apis, transform_apis, device_apis, tags, externalDocs]
      responses:
        200:
          description: Success
          schema:
            type: object
        461:
          description: App does not exist
          schema:
            $ref: '#/definitions/Error'

  /api/auth:
    post:
      tags:
        - Authorization
      summary: Login and get access and refresh tokens
      description: ''
      operationId: server.endpoints.auth.login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The username and password
          required: true
          schema:
            $ref: '#/definitions/Authentication'
      responses:
        201:
          description: Success
          schema:
            $ref: '#/definitions/Token'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
  
  /api/auth/refresh:
    post:
      tags:
        - Authorization
      summary: Get a fresh access token
      description: ''
      operationId: server.endpoints.auth.refresh
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Token'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
  
  /api/auth/logout:
    post:
      tags:
        - Authorization
      summary: Logout of walkoff
      operationId: server.endpoints.auth.logout
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The refresh token to be revoked
          required: true
          schema:
            type: object
            required: [refresh_token]
            properties:
              refresh_token:
                type: string
                description: the refresh token to be revoked
      responses:
        200:
          description: Success
  /api/cases:
    get:
      tags:
        - Cases
      summary: Read all cases
      description: ''
      operationId: server.endpoints.cases.read_all_cases
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Case'
    put:
      tags:
        - Cases
      summary: Create a case
      description: ''
      operationId: server.endpoints.cases.create_case
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The name of the case to be created
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                example: Case_One
      responses:
        201:
          description: Object created
          schema:
            $ref: '#/definitions/Case'
        462:
          description: Case already exists.
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Cases
      summary: Update a case
      description: ''
      operationId: server.endpoints.cases.update_case
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Case'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Case'
        461:
          description: Case does not exist.
          schema:
            $ref: '#/definitions/Error'
  /api/cases/{case_id}:
    parameters:
      - name: case_id
        in: path
        description: The ID of the case
        required: true
        type: integer
    get:
      tags:
        - Cases
      summary: Read a case
      description: ''
      operationId: server.endpoints.cases.read_case
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Case'
        461:
          description: Case does not exist.
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Cases
      summary: Remove a case
      description: ''
      operationId: server.endpoints.cases.delete_case
      produces:
        - application/json
      responses:
        200:
          description: Success
        461:
          description: Case does not exist.
          schema:
            $ref: '#/definitions/Error'
  
  /api/cases/{case_id}/events:
    parameters:
      - name: case_id
        in: path
        description: The ID of the case
        required: true
        type: integer
    get:
      tags:
        - Cases
      summary: Read all the events for a case
      description: ''
      operationId: server.endpoints.cases.read_all_events
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        461:
          description: Case does not exist.
          schema:
            $ref: '#/definitions/Error'
  
  /api/cases/import:
    get:
      tags:
        - Cases
      summary: Import case data
      description: ''
      operationId: server.endpoints.cases.import_cases
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Filename of JSON to import into Case database
          required: false
          x-nullable: true
          schema:
            type: object
            properties:
              filename:
                type: string
                example: import_list.json
      responses:
        200:
          description: Success
        463:
          description: Invalid JSON in file.
          schema:
            $ref: '#/definitions/Error'
        515:
          description: An error occurred opening the file.
          schema:
            $ref: '#/definitions/Error'
  
  /api/cases/export:
    post:
      tags:
        - Cases
      summary: Export case data
      description: ''
      operationId: server.endpoints.cases.export_cases
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The name of the JSON file to export to.
          required: false
          x-nullable: true
          schema:
            type: object
            properties:
              filename:
                type: string
                example: export_list.json
      responses:
        200:
          description: Success
        515:
          description: Could not write to file.
          schema:
            $ref: '#/definitions/Error'
  /api/configuration:
    get:
      tags:
        - Configuration
      summary: Reads the configuration
      operationId: server.endpoints.configuration.read_config_values
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Configuration'
        401:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Configuration
      summary: Updates the configuration
      operationId: server.endpoints.configuration.update_configuration
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: configuration
          in: body
          description: The configuration object
          required: true
          schema:
            $ref: '#/definitions/Configuration'
      responses:
        200:
          description: Success
        401:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/Error'
        515:
          description: Could not write configuration to file
          schema:
            $ref: '#/definitions/Error'
  /api/devices/import:
    get:
      tags:
        - Devices
      summary: Import devices
      description: ''
      operationId: server.endpoints.devices.import_devices
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The name of the JSON file to import. Defaults to ./data/appdevice.json
          required: false
          schema:
            type: object
            properties:
              filename:
                type: string
                example: import_list.json
      responses:
        200:
          description: Success
        515:
          description: Error reading file
          schema:
            $ref: '#/definitions/Error'
        405:
          description: Validation exception
          schema:
            $ref: '#/definitions/Error'
  /api/devices/export:
    post:
      tags:
        - Devices
      summary: Export devices
      description: ''
      operationId: server.endpoints.devices.export_devices
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The name of the JSON file to export to. Defaults to ./data/appdevice.json
          required: false
          schema:
            type: object
            properties:
              filename:
                type: string
                example: export_list.json
      responses:
        200:
          description: Success
        515:
          description: Error writing to file
          schema:
            $ref: '#/definitions/Error'
  /api/devices/{device_id}:
    parameters:
      - in: path
        name: device_id
        description: ID of the device
        type: integer
        required: true
    get:
      tags:
        - Devices
      summary: Get a device
      description: ''
      operationId: server.endpoints.devices.read_device
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Device'
        461:
          description: Device does not exist.
    delete:
      tags:
        - Devices
      summary: Remove a device
      description: ''
      operationId: server.endpoints.devices.delete_device
      produces:
        - application/json
      responses:
        200:
          description: Success
        461:
          description: Device does not exist
          schema:
            $ref: '#/definitions/Error'
  /api/devices:
    get:
      tags:
        - Devices
      summary: Get all devices
      description: ''
      operationId: server.endpoints.devices.read_all_devices
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            description: A list of devices
            items:
              $ref: '#/definitions/Device'
    put:
      tags:
        - Devices
      summary: Add a device
      description: ''
      operationId: server.endpoints.devices.create_device
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The new device object to be created
          required: true
          schema:
            $ref: '#/definitions/AddDevice'
      responses:
        201:
          description: Success
          schema:
            $ref: '#/definitions/Device'
        462:
          description: Device already exists
          schema:
            $ref: '#/definitions/Error'
  
    post:
      tags:
        - Devices
      summary: Update a device
      description: ''
      operationId: server.endpoints.devices.update_device
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The new device object to be created
          required: true
          schema:
            $ref: '#/definitions/Device'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Device'
        461:
          description: Device does not exist
          schema:
            $ref: '#/definitions/Error'
  /api/events/{event_id}:
    parameters:
      - name: event_id
        in: path
        description: The name that needs to be fetched.
        required: true
        type: string
    get:
      tags:
        - Events
      summary: Read an event
      description: ''
      operationId: server.endpoints.events.read_event
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Event'
        461:
          description: Object does not exist
          schema:
            $ref: '#/definitions/Error'
  /api/events:
    post:
      tags:
        - Events
      summary: Update an event note
      description: ''
      operationId: server.endpoints.events.update_event_note
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Note to add to the case
          required: true
          schema:
            type: object
            required: [id, note]
            properties:
              id:
                type: integer
                example: 1234
              note:
                type: string
                example: This event was import somehow. I should make a note about it
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Event'
        461:
          description: Object does not exist
          schema:
            $ref: '#/definitions/Error'
  
  #/events:
  #    get:
  #      tags:
  #        - Cases
  #      summary: Stream of the case events
  #      description: ''
  #      operationId: server.endpoints.cases.stream_case_events
  #      produces:
  #        - text/event-stream
  #      responses:
  #        200:
  #          description: Success

  /api/availablesubscriptions:
    get:
      tags:
        - System
      summary: Read all available subscription options
      description: ''
      operationId: server.endpoints.metadata.read_all_possible_subscriptions
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            description: List of available subscriptions in hierarchical order from controller to transform
            type: array
            items:
              $ref: '#/definitions/AvailableSubscriptions'
  
  /api/interfaces:
    get:
      tags:
        - System
      summary: Read all interfaces
      description: ''
      operationId: server.endpoints.metadata.read_all_interfaces
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            description: All the interfaces defined
            type: array
            items:
              type: string
  
  
  /api/client/{filename}:
    get:
      tags:
        - Client
      summary: Get a client file
      description: ''
      operationId: server.endpoints.metadata.read_client_file
      produces:
        - application/json
      parameters:
        - name: filename
          in: path
          description: The name of the file to fetch
          required: true
          type: string
      responses:
        200:
          description: Success
        463:
          description: Invalid filename

  /metrics/apps:
    get:
      tags:
        - Metrics
      summary: Read app usage metrics
      description: ''
      operationId: server.endpoints.metrics.read_app_metrics
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AppMetrics'
  /metrics/workflows:
    get:
      tags:
        - Metrics
      summary: Read Workflow Metrics
      description: ''
      operationId: server.endpoints.metrics.read_workflow_metrics
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/WorkflowMetrics'
  /api/playbooks:
    get:
      tags:
        - Playbooks
      summary: Read all playbooks
      description: ''
      operationId: server.endpoints.playbooks.get_playbooks
      produces:
        - application/json
      parameters:
        - in: query
          name: full
          type: boolean
          required: false
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/AllPlaybooksOverview'
    put:
      tags:
        - Playbooks
      summary: Create a playbook
      description: ''
      operationId: server.endpoints.playbooks.create_playbook
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The playbook object to be created
          required: true
          schema:
            $ref: '#/definitions/Playbook'
      responses:
        201:
          description: Object created
          schema:
            type: object
            description: All workflows and their associated playbooks. Form of '{playbook_name -> [workflow_name]}'
        211:
          description: Playbook created with empty template
          schema:
            type: object
            description: All workflows and their associated playbooks. Form of '{playbook_name -> [workflow_name]}'
        462:
          description: Playbook already exists.
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Playbooks
      summary: Update a playbook
      description: ''
      operationId: server.endpoints.playbooks.update_playbook
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Fields of the playbook object to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdatePlaybook'
      responses:
        200:
          description: Success
          schema:
            type: object
            description: All workflows for the associated playbook. Form of '{playbook_name -> [workflow_name]}'
        461:
          description: Playbook does not exist.
          schema:
            $ref: '#/definitions/Error'
        462:
          description: Playbook with that name already exists.
          schema:
            $ref: '#/definitions/Error'
        463:
          description: Invalid input error.
          schema:
            $ref: '#/definitions/Error'
  /api/playbooks/{playbook_name}:
    parameters:
      - name: playbook_name
        in: path
        description: The name that needs to be fetched.
        required: true
        type: string
    get:
      tags:
        - Playbooks
      summary: Read a playbook
      description: ''
      operationId: server.endpoints.playbooks.read_playbook
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: object
            description: All workflows for the specified playbook. Form of '{playbook_name -> [workflow_name]}'
        461:
          description: Object does not exist.
          schema:
            $ref: '#/definitions/Error'
        463:
          description: Invalid input error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Playbooks
      summary: Delete a playbook
      description: ''
      operationId: server.endpoints.playbooks.delete_playbook
      produces:
        - application/json
      responses:
        200:
          description: Success
        461:
          description: Playbook does not exist.
          schema:
            $ref: '#/definitions/Error'
        515:
          description: I/O error.
          schema:
            $ref: '#/definitions/Error'
  /api/playbooks/{playbook_name}/copy:
    post:
      tags:
        - Playbooks
      summary: Copy a playbook
      description: ''
      operationId: server.endpoints.playbooks.copy_playbook
      parameters:
        - name: playbook_name
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
        - in: body
          name: body
          description: New playbook name (defaults to <Current_Name>_Copy)
          required: false
          schema:
            type: object
            properties:
              playbook:
                type: string
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Playbook created
          schema:
            type: object
            description: All workflows and their associated playbooks. Form of '{playbook_name -> [workflow_name]}'
        461:
          description: Playbook does not exist.
          schema:
            $ref: '#/definitions/Error'
        462:
          description: Invalid playbook name. Playbook already exists.
          schema:
            $ref: '#/definitions/Error'
  /api/playbooks/{playbook_name}/workflows:
    parameters:
      - name: playbook_name
        in: path
        description: 'The name that needs to be fetched. '
        required: true
        type: string
    get:
      tags:
        - Playbooks
      summary: Read all workflows in playbook
      description: ''
      operationId: server.endpoints.playbooks.get_workflows
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            description: The JSON representation of all the workflows for the playbook
            items:
              type: object
              properties:
                schema:
                  $ref: '#/definitions/Workflow'
        461:
          description: Playbook does not exist.
          schema:
            $ref: '#/definitions/Error'
        463:
          description: Invalid input error.
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Workflows
      summary: Create a workflow
      description: ''
      operationId: server.endpoints.playbooks.create_workflow
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The workflow object to be created
          required: true
          schema:
            $ref: '#/definitions/AddWorkflow'
      responses:
        201:
          description: Workflow created.
          schema:
            $ref: '#/definitions/Workflow'
        211:
          description: Workflow created using default template.
          schema:
            $ref: '#/definitions/Workflow'
        461:
          description: Playbook does not exist.
          schema:
            $ref: '#/definitions/Error'
        462:
          description: Workflow already exists.
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Workflows
      summary: Update a workflow
      description: ''
      operationId: server.endpoints.playbooks.update_workflow
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The fields of the workflow object to be updated
          required: true
          schema:
            $ref: '#/definitions/WorkflowUpdate'
      responses:
        200:
          description: Success
          schema:
            type: object
            required: [workflow]
            properties:
              workflow:
                $ref: '#/definitions/Workflow'
        461:
          description: Playbook or workflow does not exist.
          schema:
            $ref: '#/definitions/Error'
        462:
          description: Workflow already exists.
          schema:
            $ref: '#/definitions/Error'
        463:
          description: Invalid input error.
          schema:
            $ref: '#/definitions/Error'
  /api/playbooks/{playbook_name}/workflows/{workflow_name}:
    parameters:
    - name: playbook_name
      in: path
      description: The name that needs to be fetched.
      required: true
      type: string
    - name: workflow_name
      in: path
      description: 'The name that needs to be fetched. '
      required: true
      type: string
    get:
      tags:
        - Workflows
      summary: Read a workflow
      description: ''
      operationId: server.endpoints.playbooks.read_workflow
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Workflow'
        461:
          description: Playbook or workflow does not exist.
          schema:
            $ref: '#/definitions/Error'
        463:
          description: Element not found, or malformed JSON.
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Workflows
      summary: Delete a workflow
      description: ''
      operationId: server.endpoints.playbooks.delete_workflow
      produces:
        - application/json
      responses:
        200:
          description: Success
        461:
          description: Playbook or workflow does not exist.
          schema:
            $ref: '#/definitions/Error'
  
  /api/playbooks/{playbook_name}/workflows/{workflow_name}/copy:
    post:
      tags:
        - Workflows
      summary: Copy a workflow
      description: ''
      operationId: server.endpoints.playbooks.copy_workflow
      parameters:
        - name: playbook_name
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
        - name: workflow_name
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
        - in: body
          name: body
          description: The new playbook and/or workflow name
          required: false
          schema:
            $ref: '#/definitions/CopyWorkflow'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Workflow copied.
          schema:
            $ref: '#/definitions/Workflow'
        461:
          description: Playbook or workflow does not exist.
          schema:
            $ref: '#/definitions/Error'
        462:
          description: Workflow already exists.
          schema:
            $ref: '#/definitions/Error'
  /api/playbooks/{playbook_name}/workflows/{workflow_name}/execute:
    post:
      tags:
        - Workflows
      summary: Execute a workflow
      description: ''
      operationId: server.endpoints.playbooks.execute_workflow
      parameters:
        - name: playbook_name
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
        - name: workflow_name
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
        - name: body
          in: body
          schema:
            type: object
            properties:
              start:
                description: The UID of the starting action
                type: string
              arguments:
                type: array
                items:
                  $ref: '#/definitions/Argument'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        202:
          description: Success asynchronous.
          schema:
            $ref: '#/definitions/WorkflowId'
        461:
          description: Playbook or workflow does not exist.
          schema:
            $ref: '#/definitions/Error'
  /api/playbooks/{playbook_name}/workflows/{workflow_name}/pause:
    post:
      tags:
        - Workflows
      summary: Pause a workflow
      description: ''
      operationId: server.endpoints.playbooks.pause_workflow
      parameters:
        - name: playbook_name
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
        - name: workflow_name
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
        - name: id
          in: body
          required: true
          schema:
            $ref: '#/definitions/WorkflowId'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Success
        461:
          description: Playbook or workflow does not exist.
          schema:
            $ref: '#/definitions/Error'
  /api/playbooks/{playbook_name}/workflows/{workflow_name}/resume:
    post:
      tags:
        - Workflows
      summary: Resume a workflow
      description: ''
      operationId: server.endpoints.playbooks.resume_workflow
      parameters:
        - name: playbook_name
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
        - name: workflow_name
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
        - name: id
          in: body
          required: true
          schema:
            $ref: '#/definitions/WorkflowId'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Success
        461:
          description: Playbook or workflow does not exist.
          schema:
            $ref: '#/definitions/Error'
        463:
          description: Invalid UUID.
          schema:
            $ref: '#/definitions/Error'
  /api/playbooks/{playbook_name}/workflows/{workflow_name}/save:
    post:
      tags:
        - Workflows
      summary: Save a workflow
      description: ''
      operationId: server.endpoints.playbooks.save_workflow
      parameters:
        - name: playbook_name
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
        - name: workflow_name
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
        - in: body
          name: body
          description: Start action and Actions
          required: true
          schema:
            type: object
            required: [actions]
            properties:
              start:
                type: string
              actions:
                type: array
                items:
                  $ref: "#/definitions/Action"
              branches:
                type: array
                items:
                  $ref: "#/definitions/Branch"
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        200:
          description: Success
        461:
          description: Playbook or workflow does not exist.
          schema:
            $ref: '#/definitions/Error'
        463:
          description: Invalid action or app in workflow
          schema:
            $ref: '#/definitions/Error'
        515:
          description: I/O error.
          schema:
            $ref: '#/definitions/Error'
  /api/roles:
    get:
      tags:
        - Roles
      summary: Read all roles
      description: ''
      operationId: server.endpoints.roles.read_all_roles
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            description: A list of roles
            type: array
            items:
              $ref: '#/definitions/Role'
    put:
      tags:
        - Roles
      summary: Create a role
      description: ''
      operationId: server.endpoints.roles.create_role
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The role object to be created
          required: true
          schema:
            $ref: '#/definitions/AddRole'
      responses:
        201:
          description: Object created.
          schema:
            $ref: '#/definitions/Role'
        462:
          description: Object exists.
    post:
      tags:
        - Roles
      summary: Update a role
      description: ''
      operationId: server.endpoints.roles.update_role
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Updated fields for the role object
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Role'
        461:
          description: Object does not exist.
  /api/roles/{role_id}:
    parameters:
      - name: role_id
        in: path
        description: The name that needs to be fetched.
        required: true
        type: string
    get:
      tags:
        - Roles
      summary: Read a role
      description: ''
      operationId: server.endpoints.roles.read_role
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Role'
        461:
          description: Object does not exist.
    delete:
      tags:
        - Roles
      summary: Delete a role
      description: ''
      operationId: server.endpoints.roles.delete_role
      produces:
        - application/json
      responses:
        200:
          description: Success
        461:
          description: Object does not exist.

  /api/scheduler:
    get:
      tags:
        - Scheduler
      summary: Get the current scheduler status.
      description: ''
      operationId: server.endpoints.scheduler.get_scheduler_status
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Scheduler'
  
  /api/scheduler/{status}:
    parameters:
      - in: path
        name: status
        description: Requested status of the scheduler
        type: string
        required: true
    get:
      tags:
        - Scheduler
      summary: Update the status of the scheduler
      description: ''
      operationId: server.endpoints.scheduler.update_scheduler_status
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Scheduler'
  
  /api/scheduledtasks:
    get:
      tags:
        - Scheduler
      summary: Get all the scheduled tasks
      operationId: server.endpoints.scheduler.read_all_scheduled_tasks
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            description: A list of Scheduled Task objects
            type: array
            items:
              $ref: '#/definitions/ScheduledTask'
    put:
      tags:
        - Scheduler
      summary: Create a new Scheduled Task
      operationId: server.endpoints.scheduler.create_scheduled_task
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The new Scheduled Task object
          required: true
          schema:
            $ref: '#/definitions/AddScheduledTask'
      responses:
        201:
          description: Success
          schema:
            description: A list of Scheduled Task objects
            type: array
            items:
              $ref: '#/definitions/ScheduledTask'
        462:
          description: Scheduled task already exists
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Scheduler
      summary: Update a new Scheduled Task
      operationId: server.endpoints.scheduler.update_scheduled_task
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The updated Scheduled Task object
          required: true
          schema:
            $ref: '#/definitions/ScheduledTask'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ScheduledTask'
        461:
          description: Scheduled task does not exist
          schema:
            $ref: '#/definitions/Error'
        462:
          description: Scheduled task name already exists
          schema:
            $ref: '#/definitions/Error'
  
  /api/scheduledtasks/{scheduled_task_id}:
    parameters:
      - name: scheduled_task_id
        in: path
        description: The ID of the scheduled task.
        required: true
        type: string
    get:
      tags:
        - Scheduler
      summary: Get the scheduled task
      operationId: server.endpoints.scheduler.read_scheduled_task
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ScheduledTask'
        461:
          description: Scheduled task does not exist
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Scheduler
      summary: Delete the scheduled task
      operationId: server.endpoints.scheduler.delete_scheduled_task
      produces:
        - application/json
      responses:
        200:
          description: Success
        461:
          description: Scheduled task does not exist
          schema:
            $ref: '#/definitions/Error'
  
  /api/scheduledtasks/{scheduled_task_id}/{action}:
    put:
      tags:
        - Scheduler
      summary: Enable the scheduled task
      operationId: server.endpoints.scheduler.control_scheduled_task
      produces:
        - application/json
      parameters:
        - name: scheduled_task_id
          in: path
          description: The ID of the scheduled task.
          required: true
          type: string
        - name: action
          in: path
          description: The action to take on the task.
          required: true
          type: string
          enum: [start, stop]
      responses:
        200:
          description: Success
        461:
          description: Scheduled task does not exist
          schema:
            $ref: '#/definitions/Error'
  /api/triggers/send_data:
    post:
      summary: Send data to one or more workflows with trigger actions awaiting data before continuing execution
      description: ''
      operationId: server.endpoints.triggers.send_data_to_trigger
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [execution_uids, data_in]
            properties:
              execution_uids:
                description: Execution UIDs of currently paused workflows
                type: array
                items:
                  type: string
              data_in:
                description: Data to send to workflows awaiting data
              inputs:
                description: Updated inputs to send to the trigger action
                type: object
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: string
              description: The execution UIDs of workflows that were sent data.

  /api/users:
    get:
      tags:
        - Users
      summary: Read all users
      description: ''
      operationId: server.endpoints.users.read_all_users
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            description: A list of users
            items:
              $ref: '#/definitions/DisplayUser'
    put:
      tags:
        - Users
      summary: Create a user
      description: ''
      operationId: server.endpoints.users.create_user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The new user object to be created
          required: true
          schema:
            $ref: '#/definitions/AddUser'
      responses:
        201:
          description: User created.
          schema:
            description: The newly created user.
            $ref: '#/definitions/DisplayUser'
        462:
          description: Could not create user <username>. User already exists.
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Users
      summary: Update a user
      description: ''
      operationId: server.endpoints.users.update_user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Updated fields for the user object
          required: true
          schema:
            $ref: '#/definitions/EditUser'
      responses:
        200:
          description: Success
          schema:
            description: The updated user.
            $ref: '#/definitions/DisplayUser'
        400:
          description: Invalid password
          schema:
            $ref: '#/definitions/Error'
        461:
          description: Could not edit user <username>. User does not exist.
          schema:
            $ref: '#/definitions/Error'
  
  
  /api/users/{user_id}:
    parameters:
      - name: user_id
        in: path
        description: The id of the user to be fetched
        required: true
        type: integer
    get:
      tags:
        - Users
      summary: Get a user
      description: ''
      operationId: server.endpoints.users.read_user
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            description: The user object matching the user id inputted
            $ref: '#/definitions/DisplayUser'
        461:
          description: Could not display user <username>. User does not exist.
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Users
      summary: Delete a user
      description: ''
      operationId: server.endpoints.users.delete_user
      produces:
        - application/json
      responses:
        200:
          description: Success
        401:
          description: Could not delete user <username>. User is current user.
          schema:
            $ref: '#/definitions/Error'
        461:
          description: Could not delete user <username>. User does not exist.
          schema:
            $ref: '#/definitions/Error'
  /api/workflowresults:
    get:
      tags: [Workflow]
      summary: Gets all the results from all the executed workflows
      operationId: server.endpoints.playbooks.read_all_results
      produces: [application/json]
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/CompleteWorkflowResults'
  
  /api/workflowresults/{uid}:
    get:
      tags: [Workflow]
      summary: Gets the results from an executed workflow
      operationId: server.endpoints.playbooks.read_result
      produces: [application/json]
      parameters:
        - name: uid
          in: path
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/WorkflowResult'
        461:
          description: Object does not exist
          schema:
            $ref: '#/definitions/Error'

securityDefinitions:
  AuthenticationToken:
    type: apiKey
    name: Authorization
    in: header
    description: >
      We use a JWT authorization workflow. Use the /api/auth endpoint to get JWT access and refresh tokens. Then use the
      access token in the header "Authorization: Bearer accesstoken.goes.here".  That token will expire in 15 minutes by
      default. When it expires, you'll receive a 401 response code. At that point, use the /api/auth/refresh
      with the header "Authorization: Bearer refreshtoken.goes.here" to receive a fresh access token. When you're done,
      please use the /api/auth/logout endpoint to log out.  See the implementation in the Walkoff App for an example
      implementation.

security:
  - AuthenticationToken: []

definitions:
    ActionArgument:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
        type:
          type: string
        required:
          description: is the argument required
          type: boolean
        default:
          description: default value for the argument
    Action:
      type: object
      required: [args]
      properties:
        description:
          description: description of the action
          type: string
        args:
          description: accepted arguments to the action
          type: array
          items:
            $ref: '#/definitions/ActionArgument'
    
    Error:
      type: object
      required: [error]
      description: An error
      properties:
        error:
          type: string
          description: error message
          example: Something really bad happened
    
    AvailableSubscriptions:
      type: object
      required: [type, events]
      description: The events which can be subscribed to for an execution element
      properties:
        type:
          description: The type of execution element
          type: string
          example: Condition
          enum: [controller, playbook, workflow, action, branch, condition, transform]
        events:
          description: Events which can be subscribed to
          type: array
          items:
            type: string
          example: [Event1, Event_2, 'Event 3']
    AppApi:
      type: object
      description: Api used for an app
      required: [info]
      properties:
        info:
          $ref: '#/definitions/ApiInfo'
        action_apis:
          description: Actions associated with this app
          type: array
          items:
            $ref: '#/definitions/ActionApi'
        condition_apis:
          description: Conditions associated with this app
          type: array
          items:
            $ref: '#/definitions/ConditionApi'
        transform_apis:
          description: Transforms associated with this app
          type: array
          items:
            $ref: '#/definitions/TransformApi'
        device_apis:
          description: Devices associated with this app
          type: array
          items:
            $ref: '#/definitions/DeviceApi'
        tags:
          type: array
          items:
            $ref: '#/definitions/ApiTag'
          uniqueItems: true
        external_docs:
          type: array
          items:
            $ref: '#/definitions/ExternalDoc'
        
    ApiInfo:
      type: object
      description: General information about the API
      required: [version, title]
      properties:
        title:
          type: string
          description: A unique and precise title of the API
          example: Splunk
        version:
          type: string
          description: A semantic version number of the API
        description:
          type: string
          description: A longer description of the API. Should be different from the title.
        terms_of_service:
          type: string
          description: Terms of service for the API
        contact:
          $ref: '#/definitions/ApiContact'
        license:
          $ref: '#/definitions/ApiLicense'
    
    ApiContact:
      type: object
      description: Contact information for the owners of this API
      properties:
        name:
          type: string
          description: The ame of the contact person or organization
        url:
          type: string
          description: The URL pointing to the contact information
          format: uri
        email:
          type: string
          description: The email address of the contact person/organization
          format: email
    
    ApiLicense:
      type: object
      description: License information for this API
      required: [name]
      properties:
        name:
          type: string
          description: The name of the license type
        url:
          type: string
          description: The URL pointing to the license
          format: uri
    
    ActionApi:
      type: object
      description: The api of an app's action
      required: [name, run, returns]
      properties:
        name:
          type: string
          description: unique name of the action
        run:
          type: string
          description: The path to the executable function
        returns:
          type: array
          items:
            $ref: '#/definitions/ReturnApi'
          description: The return types of this action
        parameters:
          type: array
          items:
            $ref: '#/definitions/ParameterApi'
          description: The parameters needed by this action
        deprecated:
          type: boolean
          default: false
          description: Is this action deprecated?
        tags:
          type: array
          items:
            type: string
          description: tags for this action
          uniqueItems: true
        summary:
          type: string
          description: A brief summary of this action
        description:
          type: string
          description: A longer description of the operation
        external_docs:
          type: array
          items:
            $ref: '#/definitions/ExternalDoc'
    
    ConditionApi:
      type: object
      description: The api of an app's condition
      required: [name, run, returns, data_in]
      properties:
        name:
          type: string
          description: unique name of the action
        run:
          type: string
          description: The path to the executable function
        data_in:
          type: string
          description: name of parameter which comes from executed action
        parameters:
          type: array
          items:
            $ref: '#/definitions/ParameterApi'
          description: The parameters needed by this action
        deprecated:
          type: boolean
          default: false
          description: Is this action deprecated?
        tags:
          type: array
          items:
            type: string
          description: tags for this action
          uniqueItems: true
        summary:
          type: string
          description: A brief summary of this action
        description:
          type: string
          description: A longer description of the operation
        external_docs:
          type: array
          items:
            $ref: '#/definitions/ExternalDoc'
        returns:
          type: array
          items:
            $ref: '#/definitions/ReturnApi'
          description: The return types of this action
    
    TransformApi:
      type: object
      description: The api of an app's transform
      required: [name, run, data_in, returns]
      properties:
        name:
          type: string
          description: unique name of the action
        run:
          type: string
          description: The path to the executable function
        data_in:
          type: string
          description: name of parameter which comes from executed action
        parameters:
          type: array
          items:
            $ref: '#/definitions/ParameterApi'
          description: The parameters needed by this action
        deprecated:
          type: boolean
          default: false
          description: Is this action deprecated?
        tags:
          type: array
          items:
            type: string
          description: tags for this action
          uniqueItems: true
        summary:
          type: string
          description: A brief summary of this action
        description:
          type: string
          description: A longer description of the operation
        external_docs:
          type: array
          items:
            $ref: '#/definitions/ExternalDoc'
        returns:
          type: array
          items:
            $ref: '#/definitions/ReturnApi'
          description: The return types of this transform
    
    DeviceApi:
      type: object
      required: [name, fields]
      properties:
        name:
          type: string
          description: Name of the device type
        description:
          type: string
        fields:
          type: array
          items:
            $ref: '#/definitions/DeviceFieldApi'
    
    DeviceFieldApi:
      type: object
      required: [name, schema]
      properties:
        name:
          type: string
        description:
          type: string
          description: description of what the argument provides
        encrypted:
          type: boolean
          description: Is this field encrypted
          default: false
        placeholder:
          type: string
          description: brief description of the field to be used to prompt a user
        required:
          type: boolean
          default: false
          description: Is this field required?
        schema:
          $ref: '#/definitions/ParameterSchema'
    
    
    ParameterApi:
      type: object
      description: A parameter using for actions
      required: [name, schema]
      properties:
        name:
          type: string
        example:
          type: [number, integer, string, boolean]
        description:
          type: string
          description: description of the parameter
        placeholder:
          type: string
          description: brief description of the field to be used to prompt a user
        required:
          type: boolean
          default: false
          description: Is this parameter required
        schema:
          $ref: '#/definitions/ParameterSchema'
    
    ReturnApi:
      type: object
      description: A specification of what an action returns
      required: [status]
      properties:
        status:
          type: string
          description: Status of the return
        description:
          type: string
          description: description of the return type
        schema:
          $ref: '#/definitions/ParameterSchema'
        examples:
          description: An exaple of the returned type
    
    ExternalDoc:
      type: object
      description: information about external documentation
      required: [url]
      properties:
        description:
          type: string
          description: Description of the documentation
        url:
          type: string
          description: Points to the external documentation
          format: uri
    
    ApiTag:
      type: object
      description: A tag for a class of actions/conditions/transforms in this app
      required: [name]
      properties:
        name:
          type: string
          description: The name of the tag
        description:
          type: string
          description: Description of the tag
        external_docs:
          type: array
          items:
            $ref: '#/definitions/ExternalDoc'
          
    ParameterSchema:
      type: object
      description: Fields used to validate parameter against a JSON schema (Draft 4)
      required: [type]
      properties:
        type:
          type: string
          enum: [string, boolean, integer, number, object, array]
        format:
          type: string
          enum: [date-time, email, hostname, ipv4, ipv6, uri, uri-reference, uri-template, json-pointer]
        multipleOf:
          type: number
          minimum: 0
          exclusiveMinimum: true
        maximum:
          type: number
        exclusiveMaximum:
          type: boolean
        minimum:
          type: number
        exclusiveMinimum:
          type: boolean
        maxLength:
          type: integer
          minimum: 0
        minLength:
          type: integer
          minimum: 0
        pattern:
          type: string
        maxItems:
          type: integer
          minimum: 0
        minItems:
          type: integer
          minimum: 0
        uniqueItems:
          type: boolean
        enum:
          type: array
          minItems: 1

    Authentication:
      type: object
      required: [username, password]
      additionalProperties: false
      properties:
        username:
          type: string
        password:
          type: string
    
    Token:
      type: object
      required: [access_token]
      properties:
        access_token:
          type: string
          description: Short-lived JWT used to provide access
        refresh_token:
          type: string
          description: Long-lived JWT used to refresh a token

    AddCase:
      type: object
      required: [name]
      additionalProperties: false
      properties:
        name:
          description: Name of the case
          type: string
          example: case1
        note:
          description: A user-created note attached to the event
          type: string
          example: This case does some things I want it to do.
        subscriptions:
          description: The events this case is subscribed to
          type: array
          items:
            $ref: '#/definitions/Subscription'
    Case:
      type: object
      required: [id]
      additionalProperties: false
      properties:
        id:
          description: Unique identifier for the case
          type: integer
          readOnly: true
          example: 42
        name:
          description: Name of the case
          type: string
          example: case1
        note:
          description: A user-created note attached to the event
          type: string
          example: This case does some things I want it to do.
        subscriptions:
          description: The events this case is subscribed to
          type: array
          items:
            $ref: '#/definitions/Subscription'
    
    Subscription:
      type: object
      required: [uid, events]
      properties:
        uid:
          description: Universal ID for the execution element  or 'controller' for the controller
          type: string
        events:
          description: A list of events subscribed to
          type: array
          items:
            type: string
          example:
            - Workflow Execution Start
            - App Instance Created
            - Action Execution Success
    
    Event:
      type: object
      required: [timestamp, event_type, originator, message, note, data]
      properties:
        id:
          description: Unique identifier for the event
          type: integer
          readOnly: true
          example: 42
        timestamp:
          description: String representation of the time at which the event happened
          type: string
          readOnly: true
          example: '2017-05-12 15:54:18.121421'
        event_type:
          description: The type of event
          type: string
          readOnly: true
          enum: [System, Workflow, Action, Branch, Condition, Transform]
          example: Action
        originator:
          description: The UID of the execution element which caused this event
          type: string
        message:
          description: The message attached to the event
          type: string
          readOnly: true
          example: Branch not taken
        note:
          description: A user-created note attached to the event
          type: string
          example: This event handled that thing I wanted to stop
        data:
          description: An object providing additional information about the event
          type: object
          readOnly: true
          example: 'Output: This action output this: 1423'
        cases:
          description: The cases this event belongs to
          type: array
          readOnly: true
          example: [case1, mycase, thatonecase, thatothercase]
          items:
            $ref: '#/definitions/Case'
    Configuration:
        type: object
        description: The configuration
        additionalProperties : false
        properties:
          workflows_path:
            type: string
            description: The path to the workflows
          db_path:
            type: string
            description: The path to the primary WALKOFF database
          case_db_path:
            type: string
            description: The path to the case database
          log_config_path:
            type: string
            description: The path to the logging configuration
          host:
            type: string
            description: The server's host URL
          port:
            type: integer
            description: The server's port
            minimum: 0
            maximum: 65535
          walkoff_db_type:
            type: string
            description: The type of database used by the primary WALKOFF database
            enum: [sqlite, mysql, postgresql, oracle, mssql]
          case_db_type:
            type: string
            description: The type of database used by the case database
            enum: [sqlite, mysql, postgresql, oracle, mssql]
          clear_case_db_on_startup:
            type: boolean
            description: Should the case database be cleared upon a server restart?
          number_processes:
            type: integer
            minimum: 1
            description: Number of worker processes which can execute workflows
          access_token_duration:
            type: number
            minimum: 1
            description: Time (in minutes) to allow an access token to persist. Should greater than the duration of the refresh token
          refresh_token_duration:
            type: number
            minimum: 1
            description: Time (in days) to allow a refresh token to persist. Should greater than the duration of the refresh token
    
    

    AddDevice:
      type: object
      required: [name, app_name, type, fields]
      description: Object used to create a device
      properties:
        name:
          description: Name of the device
          type: string
          minLength: 4
          maxLength: 25
          example: Server1
        app_name:
          type: string
          example: HelloWorld
          description: The name of the app associated with this device
        type:
          type: string
          example: HelloWorldDeviceType1
          description: The type of device
          minLength: 4
          maxLength: 25
        description:
          type: string
          example: This device type configures the app under some circumstances
          description: A description of your device type
        fields:
          description: fields used to configure this device
          type: array
          items:
            $ref: '#/definitions/DeviceFieldInput'
    
    Device:
      type: object
      required: [id]
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        name:
          description: Name of the device
          type: string
          minLength: 4
          maxLength: 25
          example: Server1
        app_name:
          type: string
          example: HelloWorld
          description: The name of the app associated with this device
          readOnly: true
        type:
          type: string
          example: HelloWorldDeviceType1
          description: The type of device
          minLength: 4
          maxLength: 25
        description:
          type: string
          example: This device type configures my app under some circumstances
          description: A description of your device type
        fields:
          description: fields used to configure this device
          type: array
          items:
            $ref: '#/definitions/Argument'
    
    DeviceField:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [string, number, integer, boolean]
        required:
          description: is the argument required
          type: boolean
          default: false
        description:
          type: string
          description: description of what the argument provides
        default:
          description: default value for the argument
        encrypted:
          type: boolean
          description: Is this field encrypted
          default: false
    
    DeviceFieldInput:
      type: object
      required: [name]
      description: Object used for passing an argument into various actions or device
      properties:
        name:
          type: string
          example: regex
        value:
          example: WALK(.*)

    ActionMetricDetails:
      type: object
      required: [count, avg_time]
      properties:
        count:
          description: Number of times the action has been called
          type: integer
          example: 102
          readOnly: true
        avg_time:
          description: Average execution time for the action. As a timestamp format
          type: string
          example: '0:00:00.001000'
          readOnly: true
    ActionMetric:
      type: object
      required: [name]
      properties:
        name:
          description: Action name
          type: string
          example: repeatBackToMe
          readOnly: true
        success_metrics:
          $ref: '#/definitions/ActionMetricDetails'
        error_metrics:
          $ref: '#/definitions/ActionMetricDetails'
    AppMetricDetails:
      type: object
      required: [name, count, actions]
      properties:
        name:
          description: Name of app
          type: string
          example: HelloWorld
          readOnly: true
        count:
          description: Number of times the app has been used
          type: integer
          example: 42
          readOnly: true
        actions:
          description: Metrics of the app's actions
          type: array
          items:
            $ref: '#/definitions/ActionMetric'
    AppMetrics:
      type: object
      required: [apps]
      properties:
        apps:
          description: Metrics of apps
          type: array
          items:
            $ref: '#/definitions/AppMetricDetails'
    
    WorkflowMetric:
      type: object
      required: [name, count, avg_time]
      properties:
        name:
          description: Name of the workflow
          type: string
          example: HelloWorldWorkflow
          readOnly: true
        count:
          description: Number of times the workflow has been used
          type: integer
          example: 42
          readOnly: true
        avg_time:
          description: The average run time of this workflow
          type: string
          example: '1 day, 0:01:40.000500'
          readOnly: true
    WorkflowMetrics:
      type: object
      required: [workflows]
      properties:
        workflows:
          type: array
          items:
            $ref: '#/definitions/WorkflowMetric'

    Playbook:
        type: object
        required: [name]
        properties:
          name:
            type: string
    
    AllPlaybooksOverview:
      type: array
      items:
        $ref: '#/definitions/PlaybookOverview'
    
    PlaybookOverview:
      type: object
      description: Stripped-down view of a playbook
      required: [name, workflows]
      properties:
        name:
          type: string
          description: name of the playbook
        workflows:
          description: workflows inside of this playbook
          type: array
          items:
            $ref: '#/definitions/WorkflowDescription'
    
    WorkflowDescription:
      type: object
      required: [name, uid]
      properties:
        name:
          type: string
          description: name of the workflow
        uid:
          type: string
          description: UID of the workflow
    
    UpdatePlaybook:
        type: object
        required: [name]
        properties:
          name:
            type: string
          new_name:
            type: string
    
    Workflow:
      type: object
      required: [name]
      description: A workflow object
      additionalProperties: false
      properties:
        name:
          description: The name of the workflow. Composed of both its enclosing playbook and its own name
          type: string
          example: HelloWorldWorkflow
        actions:
          description: The actions defined in this workflow.
          type: array
          items:
            $ref: "#/definitions/DisplayAction"
        branches:
          description: The possible branches
          type: array
          items:
            $ref: '#/definitions/Branch'
        start:
          description: UID of the starting action
          type: string
          default: start
          example: action1
        accumulated_risk:
          description: The risk which has been accumulated as this workflow has been executed
          type: number
          example: 0.43
          readOnly: true
    
    AddWorkflow:
        type: object
        required: [name]
        properties:
          name:
            type: string
    
    WorkflowUpdate:
        type: object
        required: [name]
        properties:
          name:
            type: string
          new_name:
            type: string
    
    CopyWorkflow:
        type: object
        properties:
          playbook:
            type: string
          workflow:
            type: string
    
    WorkflowId:
      type: object
      required: [id]
      properties:
        id:
          type: string
          description: 32-byte hexidecimal string representing the ID of the workflow
          readOnly: true
    
    Action:
      type: object
      required: [name, action_name, app_name]
      description: Encapsulation of executing an action in an app
      additionalProperties: false
      properties:
        uid:
          description: UID of this action
          type: string
          x-nullable: true
        name:
          description: Name of the action
          type: string
          example: action1
        action_name:
          description: The action the action will take
          type: string
          example: pause
        app_name:
          description: The app to which the action belongs
          type: string
          example: CyberAnalytics
        triggers:
          description: String representation of a list of Trigger objects
          type: array
          items:
            $ref: '#/definitions/Condition'
        device_id:
          description: ID of the device to use
          type: integer
          example: 42
        arguments:
          description: The input arguments to the action
          type: array
          items:
            $ref: '#/definitions/Argument'
        output:
          description: The output of the action after it has been executed
          type: string
          example: result_from_action
        position:
          description:  position of the action onthe workflow editor
          type: object
          required: [x, y]
          properties:
            x:
              description: x position
              type: number
              example: 443.22
            y:
              description: y position
              type: number
              example: -12.036
    
    DisplayAction:
      type: object
      description: Encapsulation of executing an action in an app
      properties:
        name:
          description: Name of the action
          type: string
          example: action1
        action_name:
          description: The action the action will take
          type: string
          example: pause
        app_name:
          description: The app to which the action belongs
          type: string
          example: CyberAnalytics
        triggers:
          description: String representation of a list of Trigger objects
          type: array
          items:
            $ref: '#/definitions/Condition'
        device_id:
          description: ID of the device to use
          type: integer
          example: 42
        risk:
          description: risk associated with this action failing
          type: number
          default: 0
          example: 20
        arguments:
          description: The input arguments to the action
          type: array
          items:
            $ref: '#/definitions/Argument'
        position:
          description:  position of the action onthe workflow editor
          type: object
          required: [x, y]
          properties:
            x:
              description: x position
              type: number
              example: 443.22
            y:
              description: y position
              type: number
              example: -12.036
    
    Branch:
      type: object
      required: [source_uid, destination_uid]
      description: Encapsualtion of a list of possible actions to take and conditionals required to be met before taking that action
      additionalProperties: false
      properties:
        source_uid:
          description: The source Action UID for this Branch
          type: string
        destination_uid:
          description: The destination Action UID for this Branch, if the conditions evaluate to True
          type: string
        uid:
          description: UID of this action
          type: string
          x-nullable: true
        priority:
          description: The priority for this Branch, which will be compared to other Branches with the same source_uid Action, ascending, i.e. 1 is the highest priority.
          type: integer
        status:
          description: The status return code to use
          type: string
          example: Success
        conditions:
          description: List of conditions to evaluate
          type: array
          items:
            $ref: '#/definitions/Condition'
    
    Condition:
      type: object
      required: [action_name, app_name]
      description: Takes data and checks it against a condition given by its action Optionally filters the data before checking.
      additionalProperties: false
      properties:
        uid:
          description: UID of this condition
          type: string
          x-nullable: true
        app_name:
          description: The app to which the conditon belongs
          type: string
          example: Utilities
        action_name:
          description: The action encapsulated by this condition
          type: string
          example: regMatch
        arguments:
          description: The inputs to the condition
          type: array
          items:
            $ref: '#/definitions/Argument'
        transforms:
          description: transforms for the data before passing it into the condition
          type: array
          items:
            $ref: '#/definitions/Transform'
    
    Transform:
      type: object
      required: [action_name, app_name]
      description: Filters or otherwise transforms the data given to it
      additionalProperties: false
      properties:
        uid:
          description: UID of this transform
          type: string
          x-nullable: true
        app_name:
          description: The app to which the transform belongs
          type: string
          example: Utilities
        action_name:
          description: The action encapsulated by this transform
          type: string
          example: count
        arguments:
          description: The inputs to the transform
          type: array
          items:
            $ref: '#/definitions/Argument'
    
    Argument:
      type: object
      required: [name]
      description: Object used for passing an argument into actions. Either reference or value must be selected.
      minProperties: 2
      properties:
        name:
          type: string
          example: regex
        value:
          description: The value of the argument
          example: WALK(.*)
        reference:
          description: The UID of the action whose output should be used
          type: string
        selection:
          description: >-
            The path to a subsection of the output of the action to use. For example [1, "a"] would use the second element
            of a list, and the "a" field of that object.
          type: array
          items:
            type: [string, integer]
    

    AddRole:
        type: object
        required: [name]
        properties:
          name:
            description: Name of the role
            type: string
            example: administrative_role
          description:
            description: Description of the role
            type: string
            example: A user with this role can access any resource and has administrative-level privileges.
          resources:
            description: A list of resources that a user with this role can access
            example: [/users, /cases, /playbooks]
            type: array
            items:
              type: string
    
    Role:
        type: object
        required: [id]
        properties:
          id:
            type: integer
            minimum: 1
            description: id of the object
          name:
            description: Name of the role
            type: string
            example: administrative_role
          description:
            description: Description of the role
            type: string
            example: A user with this role can access any resource and has administrative-level privileges.
          resources:
            description: A list of resources that a user with this role can access
            example: [/users, /cases, /playbooks]
            type: array
            items:
              type: string

    Scheduler:
      type: object
      required: [status]
      properties:
        status:
          description: State of trigger
          type: string
          example: 0 for stopped, 1 for running, 2 for paused, or a warning string
    
    AddScheduledTask:
      type: object
      required: [name]
      additionalProperties: false
      properties:
        workflows:
          description: List if UIDs of workflows attached to this task
          type: array
          items:
            type: string
        name:
          type: string
          description: Name of this task
        description:
          type: string
          description: description of this task
        status:
          type: string
          description: Status of the task
          enum: [running, stopped]
        task_trigger:
          $ref: '#/definitions/TaskTrigger'
    
    ScheduledTask:
      type: object
      required: [id]
      additionalProperties: false
      properties:
        id:
          type: integer
          description: ID of the object
          readOnly: true
        workflows:
          description: List if UIDs of workflows attached to this task
          type: array
          items:
            type: string
        name:
          type: string
          description: Name of this task
        description:
          type: string
          description: description of this task
        status:
          type: string
          description: Status of the task
          enum: [running, stopped]
        task_trigger:
          $ref: '#/definitions/TaskTrigger'
    
    TaskTrigger:
      type: object
      description: Scheduler to use.
      required: [args, type]
      properties:
        type:
          description: Type of scheduler trigger to use for this task
          type: string
          enum: [date, interval, cron]
          example: date
        args:
          type: object
          description: Arguments for the trigger.

    AddUser:
        type: object
        required: [username, password]
        properties:
          username:
            description: Username or email of the user
            type: string
            example: administrator
          password:
            description: Password for the user
            type: string
            example: password123
    #      roles:
    #        description: A list of roles that this user possesses
    #        type: array
    #        items:
    #          type: string
    EditUser:
        type: object
        required: [id]
        properties:
          id:
            description: Database id of the user
            type: integer
            example: 123
            readOnly: true
          username:
            description: New username or email of the user
            type: string
            example: administrator
          old_password:
            description: Previous password for the user
            type: string
            example: password123
          password:
            description: New password for the user
            type: string
            example: password321
          active:
            description: activate/deactive a user
            type: boolean
    #      roles:
    #        description: New list of role objects that this user possesses
    #        type: array
    #        items:
    #          type: string
    #        example:
    #          - /users
    #          - /cases
    #          - /playbooks
    DisplayUser:
        type: object
        properties:
          id:
            description: Database id of the user
            type: integer
            example: 123
            readOnly: true
          username:
            description: Username or email of the user
            type: string
            example: administrator
          active:
            description: activate/deactive a user
            type: boolean
          roles:
            description: List of role objects that this user possesses
            type: array
            items:
              type: string
    CompleteWorkflowResults:
      type: object
      required: [id]
      properties:
        id:
          $ref: '#/definitions/WorkflowResult'
    
    WorkflowResult:
      type: object
      required: [name, started_at, status, results, uid]
      properties:
        name:
          description: The name of the workflow. Contains both playbook and workflow information
          type: string
          example: PlaybookName-WorkflowName
          readOnly: true
        started_at:
          description: The timestamp of when the workflow completed
          type: string
          example: '2017-05-24 00:42:22.934058'
          readOnly: true
        completed_at:
          description: The timestamp of when the workflow completed
          type: string
          example: '2017-05-24 00:43:26.930892'
          readOnly: true
        status:
          description: The status of the workflow
          type: string
          enum: [completed, running, 'awaiting_data', 'paused']
          readOnly: true
        results:
          description: The results of the workflow actions
          type: array
          items:
            $ref: '#/definitions/DetailedActionResult'
        uid:
          description: The UID of the workflow
          type: string
    
    DetailedActionResult:
      type: object
      required: [name, result, input, type, timestamp]
      description: A result of an action execution
      properties:
        name:
          description: The name of the action
          type: string
          example: 'This One action'
          readOnly: true
        action_name:
          description: The name of the action take by the action
          type: string
          example: get that thing
          readOnly: true
        app_name:
          description: The name of the app associated with the action
          type: string
          example: ThingGetter
          readOnly: true
        result:
          description: The result of the action
          type: object
          readOnly: true
        type:
          description: Success or failure of the action
          type: string
          example: SUCCESS
          enum: [SUCCESS, ERROR]
          readOnly: true
        timestamp:
          description: The timestamp of when the action completed
          type: string
          example: '2017-05-24 00:43:26.930892'
          readOnly: true
        input:
          description: The input to the action. Of form {input_name -> value}
          type: object
          readOnly: true


