openapi: '3.0.0'
info:
  description: >-
    An active cyber defense development framework enabling orchestration
    capabilities to be written once and deployed across WALKOFF-enabled
    orchestration tools. https://nsacyber.github.io/WALKOFF/
  version: 0.9.1
  title: WALKOFF
  contact:
    email: walkoff@nsa.gov
  license:
    name: Creative-Commons
    url: 'http://creativecommons.org/licenses/by/4.0/'

tags:
  - name: Authorization
    description: Authorization Operations
  - name: Apps
    description: App Management Operations
  - name: Configuration
    description: System Configuration Operations
  - name: Devices
    description: Device Operations
  - name: Users
    description: User operations
  - name: Roles
    description: Role Operations
  - name: Playbooks
    description: Playbook Operations
  - name: Workflows
    description: Workflow Operations
  - name: WorkflowQueue
    description: Workflow Control Operations
  - name: Events
    description: Event Operations
  - name: Scheduler
    description: Scheduler Operations
  - name: Triggers
    description: Trigger Operations
  - name: System
    description: System Operations
  - name: Client
    description: Serves up client pages
  - name: System
    description: System Resources

servers:
  - url: /api

paths:
  /apps:
    get:
      tags:
        - System
      summary: Gets all apps
      description: ''
      operationId: api_gateway.server.endpoints.appapi.read_all_apps
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: List of app names
                items:
                  type: string
                  example: [PhillipsHue, OpenDaylight, PaloAlto]
  
  /apps/apis:
    get:
      tags:
        - Apps
      summary: Get all app apis
      description: ''
      operationId: api_gateway.server.endpoints.appapi.read_all_app_apis
      parameters:
        - name: field_name
          in: query
          description: The name of the field of the api to get for all apps
          required: false
          schema:
            type: string
            enum: [info, action_apis, condition_apis, transform_apis, device_apis, tags, external_docs]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  
  /apps/apis/{app_name}:
    get:
      tags:
        - Apps
      summary: Get and app's api
      description: ''
      operationId: api_gateway.server.endpoints.appapi.read_app_api
      parameters:
        - name: app_name
          in: path
          description: The name of the app to get
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppApi'
        404:
          description: App does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /apps/apis/{app_name}/{field_name}:
    get:
      tags:
        - Apps
      summary: Get a field of an app's api
      description: ''
      operationId: api_gateway.server.endpoints.appapi.read_app_api_field
      parameters:
        - name: app_name
          in: path
          description: The name of the app to get
          required: true
          schema:
            type: string
        - name: field_name
          in: path
          description: The name of the field in the app api to get
          required: true
          schema:
            type: string
            enum: [info, action_apis, condition_apis, transform_apis, device_apis, tags, externalDocs]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        404:
          description: App does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth:
    post:
      tags:
        - Authorization
      summary: Login and get access and refresh tokens
      description: ''
      operationId: api_gateway.server.endpoints.auth.login
      requestBody:
        description: The username and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
  
  /auth/refresh:
    post:
      tags:
        - Authorization
      summary: Get a fresh access token
      description: ''
      operationId: api_gateway.server.endpoints.auth.refresh
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/logout:
    post:
      tags:
        - Authorization
      summary: Logout of walkoff
      operationId: api_gateway.server.endpoints.auth.logout
      requestBody:
        description: The refresh token to be revoked
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token:
                  type: string
                  description: the refresh token to be revoked
      responses:
        204:
          description: Success
        400:
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /configuration:
    get:
      tags:
        - Configuration
      summary: Reads the configuration
      operationId: api_gateway.server.endpoints.configuration.read_config_values
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Configuration
      summary: Updates the configuration
      operationId: api_gateway.server.endpoints.configuration.update_configuration
      requestBody:
        required: true
        description: The configuration object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configuration'
      responses:
        200:
          description: Success
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        515:
          description: Could not write configuration to file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Configuration
      summary: Updates the configuration
      operationId: api_gateway.server.endpoints.configuration.patch_configuration
      requestBody:
        description: The configuration object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configuration'
      responses:
        200:
          description: Success
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        515:
          description: Could not write configuration to file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /client/{filename}:
    get:
      tags:
        - Client
      summary: Get a client file
      description: ''
      operationId: api_gateway.server.endpoints.metadata.read_client_file
      parameters:
        - name: filename
          in: path
          description: The name of the file to fetch
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid filename

  /roles:
    get:
      tags:
        - Roles
      summary: Read all roles
      description: ''
      operationId: api_gateway.server.endpoints.roles.read_all_roles
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: A list of roles
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      tags:
        - Roles
      summary: Create a role
      description: ''
      operationId: api_gateway.server.endpoints.roles.create_role
      requestBody:
        description: The role object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRole'
      responses:
        201:
          description: Object created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        400:
          description: Object exists.
    put:
      tags:
        - Roles
      summary: Update a role
      description: ''
      operationId: api_gateway.server.endpoints.roles.update_role
      requestBody:
        description: Updated fields for the role object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        404:
          description: Object does not exist.
    patch:
      tags:
        - Roles
      summary: Update a role
      description: ''
      operationId: api_gateway.server.endpoints.roles.patch_role
      requestBody:
        description: Updated fields for the role object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        404:
          description: Object does not exist.
  /roles/{role_id}:
    parameters:
      - name: role_id
        in: path
        description: The name that needs to be fetched.
        required: true
        schema:
          type: string
    get:
      tags:
        - Roles
      summary: Read a role
      description: ''
      operationId: api_gateway.server.endpoints.roles.read_role
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        404:
          description: Object does not exist.
    delete:
      tags:
        - Roles
      summary: Delete a role
      description: ''
      operationId: api_gateway.server.endpoints.roles.delete_role
      responses:
        204:
          description: Success
        404:
          description: Object does not exist.
  
  /availableresourceactions:
      get:
        tags:
          - Roles
        summary: Read all available resource actions
        description: ''
        operationId: api_gateway.server.endpoints.roles.read_available_resource_actions
        responses:
          200:
            description: Success
            content:
              application/json:
                schema:
                  description: List of available resource actions
                  type: array
                  items:
                    $ref: '#/components/schemas/AvailableResourceAction'

  /scheduler:
    get:
      tags:
        - Scheduler
      summary: Get the current scheduler status.
      description: ''
      operationId: api_gateway.server.endpoints.scheduler.get_scheduler_status
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scheduler'
    put:
      tags:
        - Scheduler
      summary: Update the status of the scheduler
      description: ''
      operationId: api_gateway.server.endpoints.scheduler.update_scheduler_status
      requestBody:
        description: The new Scheduled Task object
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  description: Requested status of the scheduler
                  type: string
                  enum: [start, stop, pause, resume]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required: [status]
                properties:
                  status:
                    type: string
                    description: The current status of the scheduler
  
  /scheduledtasks:
    get:
      tags:
        - Scheduler
      summary: Get all the scheduled tasks
      operationId: api_gateway.server.endpoints.scheduler.read_all_scheduled_tasks
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                description: A list of Scheduled Task objects
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledTask'
    post:
      tags:
        - Scheduler
      summary: Create a new Scheduled Task
      operationId: api_gateway.server.endpoints.scheduler.create_scheduled_task
      requestBody:
        description: The new Scheduled Task object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddScheduledTask'
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                description: A list of Scheduled Task objects
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledTask'
        400:
          description: Scheduled task already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Scheduler
      summary: Update a new Scheduled Task
      operationId: api_gateway.server.endpoints.scheduler.update_scheduled_task
      requestBody:
        description: The updated Scheduled Task object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduledTask'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduledTask'
        404:
          description: Scheduled task does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: Scheduled task name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Scheduler
      summary: Enable the scheduled task
      operationId: api_gateway.server.endpoints.scheduler.control_scheduled_task
      requestBody:
        description: The updated Scheduled Task object
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id, action]
              properties:
                id:
                  type: integer
                action:
                  type: string
                  description: The requested status of the task
                  enum: [start, stop]
      responses:
        200:
          description: Success
        404:
          description: Scheduled task does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /scheduledtasks/{scheduled_task_id}:
    parameters:
      - name: scheduled_task_id
        in: path
        description: The ID of the scheduled task.
        required: true
        schema:
          type: string
    get:
      tags:
        - Scheduler
      summary: Get the scheduled task
      operationId: api_gateway.server.endpoints.scheduler.read_scheduled_task
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduledTask'
        404:
          description: Scheduled task does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Scheduler
      summary: Delete the scheduled task
      operationId: api_gateway.server.endpoints.scheduler.delete_scheduled_task
      responses:
        204:
          description: Success
        404:
          description: Scheduled task does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      tags:
        - Users
      summary: Read all users
      description: ''
      operationId: api_gateway.server.endpoints.users.read_all_users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: A list of users
                items:
                  $ref: '#/components/schemas/DisplayUser'
    post:
      tags:
        - Users
      summary: Create a user
      description: ''
      operationId: api_gateway.server.endpoints.users.create_user
      requestBody:
        description: The new user object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUser'
      responses:
        201:
          description: User created.
          content:
            application/json:
              schema:
                description: The newly created user.
                $ref: '#/components/schemas/DisplayUser'
        400:
          description: Could not create user <username>. User already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Update a user
      description: ''
      operationId: api_gateway.server.endpoints.users.update_user
      requestBody:
        description: Updated fields for the user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUser'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                description: The updated user.
                $ref: '#/components/schemas/DisplayUser'
        400:
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Could not edit user <username>. User does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Users
      summary: Update a user
      description: ''
      operationId: api_gateway.server.endpoints.users.patch_user
      requestBody:
        description: Updated fields for the user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUser'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                description: The updated user.
                $ref: '#/components/schemas/DisplayUser'
        400:
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Could not edit user <username>. User does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  
  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        description: The id of the user to be fetched
        required: true
        schema:
          type: integer
    get:
      tags:
        - Users
      summary: Get a user
      description: ''
      operationId: api_gateway.server.endpoints.users.read_user
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                description: The user object matching the user id inputted
                $ref: '#/components/schemas/DisplayUser'
        404:
          description: Could not display user <username>. User does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Users
      summary: Delete a user
      description: ''
      operationId: api_gateway.server.endpoints.users.delete_user
      responses:
        204:
          description: Success
        401:
          description: Could not delete user <username>. User is current user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Could not delete user <username>. User does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /workflowqueue:
    get:
      tags:
        - WorkflowQueue
      summary: Get status information on the workflows currently executing
      description: ''
      operationId: api_gateway.server.endpoints.workflowqueue.get_all_workflow_status
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 50
          required: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowStatus'
    post:
      tags:
        - WorkflowQueue
      summary: Execute a workflow
      description: ''
      operationId: api_gateway.server.endpoints.workflowqueue.execute_workflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteWorkflow'
      responses:
        202:
          description: Success asynchronous.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uuid'
        404:
          description: Workflow does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: Invalid input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - WorkflowQueue
      summary: Pause, resume, or abort a workflow
      description: ''
      operationId: api_gateway.server.endpoints.workflowqueue.control_workflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ControlWorkflow'
      responses:
        204:
          description: Success.
        404:
          description: Workflow does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: Invalid input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /workflowqueue/{execution_id}:
    parameters:
      - name: execution_id
        in: path
        description: The ID that needs to be fetched.
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - WorkflowQueue
      summary: Get status information on a currently executing workflow
      description: ''
      operationId: api_gateway.server.endpoints.workflowqueue.get_workflow_status
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullWorkflowStatus'
        404:
          description: Object does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /workflowqueue/cleardb:
    parameters:
      - name: all
        in: query
        description: Whether or not to delete all workflow statuses, defaults to false
        required: false
        schema:
          type: boolean
      - name: days
        in: query
        description: The number of days of workflow statuses to keep
        required: false
        schema:
          type: integer
    delete:
      tags:
        - WorkflowQueue
      summary: Removes workflow statuses from the execution database. It will delete all of them or ones older than a certain number of days
      description: ''
      operationId: api_gateway.server.endpoints.workflowqueue.clear_workflow_status
      responses:
        204:
          description: Success


security:
  - AuthenticationToken: []

components:
  schemas:
    Error:
      type: object
      required: [title, detail, status, type]
      description: An error in RFC 7807 format
      properties:
        title:
          type: string
          description: A short, human-readable summary of the problem type.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        status:
          type: string
          description: The HTTP status code generated for this occurrence of the problem
        type:
          type: string
          description: >
            A URI reference that identifies the problem type. When dereferenced it should provide
            human-readable documentation for the problem type.
          default: 'about:blank'
        instance:
          type: string
          description: >
            A URI reference that identifies the specific occurrence of the problem. It may or may
            not yield further information if dereferenced.
    
    
    
    AvailableSubscriptions:
      type: object
      required: [type, events]
      description: The events which can be subscribed to for an execution element
      properties:
        type:
          description: The type of execution element
          type: string
          example: Condition
          enum: [controller, playbook, workflow, action, branch, condition, transform]
        events:
          description: Events which can be subscribed to
          type: array
          items:
            type: string
          example: [Event1, Event_2, 'Event 3']
    
    Uuid:
      type: string
      description: A 32-bit hexadecimal string representing a globally unique identifier
      format: uuid
    AppApi:
      type: object
      description: Api used for an app
      required: [info]
      properties:
        info:
          $ref: '#/components/schemas/ApiInfo'
        action_apis:
          description: Actions associated with this app
          type: array
          items:
            $ref: '#/components/schemas/ActionApi'
        condition_apis:
          description: Conditions associated with this app
          type: array
          items:
            $ref: '#/components/schemas/ConditionApi'
        transform_apis:
          description: Transforms associated with this app
          type: array
          items:
            $ref: '#/components/schemas/TransformApi'
        device_apis:
          description: Devices associated with this app
          type: array
          items:
            $ref: '#/components/schemas/DeviceApi'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ApiTag'
          uniqueItems: true
        external_docs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalDoc'
        
    ApiInfo:
      type: object
      description: General information about the API
      required: [version, title]
      properties:
        title:
          type: string
          description: A unique and precise title of the API
          example: Splunk
        version:
          type: string
          description: A semantic version number of the API
        description:
          type: string
          description: A longer description of the API. Should be different from the title.
        terms_of_service:
          type: string
          description: Terms of service for the API
        contact:
          $ref: '#/components/schemas/ApiContact'
        license:
          $ref: '#/components/schemas/ApiLicense'
    
    ApiContact:
      type: object
      description: Contact information for the owners of this API
      properties:
        name:
          type: string
          description: The name of the contact person or organization
        url:
          type: string
          description: The URL pointing to the contact information
          format: uri
        email:
          type: string
          description: The email address of the contact person/organization
          format: email
    
    ApiLicense:
      type: object
      description: License information for this API
      required: [name]
      properties:
        name:
          type: string
          description: The name of the license type
        url:
          type: string
          description: The URL pointing to the license
          format: uri
    
    ActionApi:
      type: object
      description: The api of an app's action
      required: [name, run, returns]
      properties:
        name:
          type: string
          description: Unique name of the action
        run:
          type: string
          description: The path to the executable function
        default_return:
          type: string
          description: The name of the default return code (if none specified, defaults to "Success")
        returns:
          type: array
          items:
            $ref: '#/components/schemas/ReturnApi'
          description: The return types of this action
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterApi'
          description: The parameters needed by this action
        deprecated:
          type: boolean
          default: false
          description: Is this action deprecated?
        tags:
          type: array
          items:
            type: string
          description: Tags for this action
          uniqueItems: true
        summary:
          type: string
          description: A brief summary of this action
        description:
          type: string
          description: A longer description of the operation
        external_docs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalDoc'
    
    ConditionApi:
      type: object
      description: The api of an app's condition
      required: [name, run, returns, data_in]
      properties:
        name:
          type: string
          description: Unique name of the action
        run:
          type: string
          description: The path to the executable function
        data_in:
          type: string
          description: Name of parameter which comes from executed action
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterApi'
          description: The parameters needed by this action
        deprecated:
          type: boolean
          default: false
          description: Is this action deprecated?
        tags:
          type: array
          items:
            type: string
          description: Tags for this action
          uniqueItems: true
        summary:
          type: string
          description: A brief summary of this action
        description:
          type: string
          description: A longer description of the operation
        external_docs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalDoc'
        returns:
          type: array
          items:
            $ref: '#/components/schemas/ReturnApi'
          description: The return types of this action
    
    TransformApi:
      type: object
      description: The api of an app's transform
      required: [name, run, data_in, returns]
      properties:
        name:
          type: string
          description: Unique name of the action
        run:
          type: string
          description: The path to the executable function
        data_in:
          type: string
          description: Name of parameter which comes from executed action
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterApi'
          description: The parameters needed by this action
        deprecated:
          type: boolean
          default: false
          description: Is this action deprecated?
        tags:
          type: array
          items:
            type: string
          description: tags for this action
          uniqueItems: true
        summary:
          type: string
          description: A brief summary of this action
        description:
          type: string
          description: A longer description of the operation
        external_docs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalDoc'
        returns:
          type: array
          items:
            $ref: '#/components/schemas/ReturnApi'
          description: The return types of this transform
    
    DeviceApi:
      type: object
      required: [name, fields]
      properties:
        name:
          type: string
          description: Name of the device type
        description:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/DeviceFieldApi'
    
    DeviceFieldApi:
      type: object
      required: [name, schema]
      properties:
        name:
          type: string
        description:
          type: string
          description: Description of what the argument provides
        encrypted:
          type: boolean
          description: Is this field encrypted
          default: false
        placeholder:
          type: string
          description: Brief description of the field to be used to prompt a user
        required:
          type: boolean
          default: false
          description: Is this field required?
        schema:
          $ref: '#/components/schemas/ParameterSchema'
    
    
    ParameterApi:
      type: object
      description: A parameter using for actions
      required: [name, schema]
      properties:
        name:
          type: string
        example:
          description: Example of the parameter
        description:
          type: string
          description: Description of the parameter
        placeholder:
          type: string
          description: Brief description of the field to be used to prompt a user
        required:
          type: boolean
          default: false
          description: Is this parameter required
        schema:
          $ref: '#/components/schemas/ParameterSchema'
    
    ReturnApi:
      type: object
      description: A specification of what an action returns
      required: [status]
      properties:
        status:
          type: string
          description: Status of the return
        description:
          type: string
          description: Description of the return type
        failure:
          type: boolean
          description: Whether this return type indicates action failure
          default: false
        schema:
          $ref: '#/components/schemas/ParameterSchema'
        examples:
          description: An exaple of the returned type
    
    ExternalDoc:
      type: object
      description: information about external documentation
      required: [url]
      properties:
        description:
          type: string
          description: Description of the documentation
        url:
          type: string
          description: Points to the external documentation
          format: uri
    
    ApiTag:
      type: object
      description: A tag for a class of actions/conditions/transforms in this app
      required: [name]
      properties:
        name:
          type: string
          description: The name of the tag
        description:
          type: string
          description: Description of the tag
        external_docs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalDoc'
          
    ParameterSchema:
      type: object
      description: Fields used to validate parameter against a JSON schema (Draft 4)
      required: [type]
      properties:
        type:
          type: string
          enum: [string, boolean, integer, number, object, array]
        format:
          type: string
          enum: [date-time, email, hostname, ipv4, ipv6, uri, uri-reference, uri-template, json-pointer]
        multipleOf:
          type: number
          minimum: 0
          exclusiveMinimum: true
        maximum:
          type: number
        exclusiveMaximum:
          type: boolean
        minimum:
          type: number
        exclusiveMinimum:
          type: boolean
        maxLength:
          type: integer
          minimum: 0
        minLength:
          type: integer
          minimum: 0
        pattern:
          type: string
        maxItems:
          type: integer
          minimum: 0
        minItems:
          type: integer
          minimum: 0
        uniqueItems:
          type: boolean
        enum:
          type: array
          items: {}
          minItems: 1

    Authentication:
      type: object
      required: [username, password]
      additionalProperties: false
      properties:
        username:
          type: string
        password:
          type: string
    
    Token:
      type: object
      required: [access_token]
      properties:
        access_token:
          type: string
          description: Short-lived JWT used to provide access
        refresh_token:
          type: string
          description: Long-lived JWT used to refresh a token

    Configuration:
        type: object
        description: The configuration
        additionalProperties : false
        properties:
          db_path:
            type: string
            description: The path to the primary WALKOFF database
          logging_config_path:
            type: string
            description: The path to the logging configuration
          host:
            type: string
            description: The server's host URL
          port:
            type: integer
            description: The server's port
            minimum: 0
            maximum: 65535
            default: 5000
          walkoff_db_type:
            type: string
            description: The type of database used by the primary WALKOFF database
            enum: [sqlite, mysql, postgresql, oracle, mssql]
            default: sqlite
          number_processes:
            type: integer
            minimum: 1
            description: Number of worker processes which can execute workflows
            default: 4
          access_token_duration:
            type: number
            minimum: 1
            description: Time (in minutes) to allow an access token to persist. Should greater than the duration of the refresh token
          refresh_token_duration:
            type: number
            minimum: 1
            description: Time (in days) to allow a refresh token to persist. Should greater than the duration of the refresh token
          zmq_results_address:
            type: string
            description: The IP address and port of the ZMQ results server. Do not change unless necessary.
            default: 'tcp://127.0.0.1:5556'
          zmq_communication_address:
            type: string
            description: The IP address and port of the ZMQ communication server. Do not change unless necessary.
            default: 'tcp://127.0.0.1:5557'
          number_threads_per_process:
            type: number
            description: The number of threads per worker process for executing workflows.
            default: 3
          cache:
            $ref: '#/components/schemas/CacheConfig'
    
    CacheConfig:
      type: object
      required: [type]
      properties:
        type:
          description: The type of cache that should be used
          type: string
          enum: [redis, disk]
        directory:
          description: The directory to hold the cache database (DiskCache only)
          type: string
          format: uri
        shards:
          description: Number of shards to distribute the cache database to (DiskCache only)
          type: integer
          minimum: 1
        timeout:
          description: Cache timeout
          type: number
          minimum: 0.0
        retry:
          description: Should this connection retry timed out connections?
          type: boolean
          default: True
        host:
          description: Host url for the cache (Redis cache only)
          type: string
          default: localhost
        port:
          description: Port for the cache (Redis cache only)
          type: integer
          minimum: 0
          maximum: 65535
          default: 6379
        unix_socket_path:
          description: Path to Unix socket to use for the cache instead of host-port. (Redis cache only)
          type: string
    AddRole:
        type: object
        required: [name]
        properties:
          name:
            description: Name of the role
            type: string
            example: administrative_role
          description:
            description: Description of the role
            type: string
            example: A user with this role can access any resource and has administrative-level privileges.
          resources:
            description: A list of resources that a user with this role can access
            type: array
            items:
              $ref: '#/components/schemas/AddResource'
    
    AddResource:
        type: object
        required: [name]
        properties:
          name:
            description: Name of the resource
            type: string
            example: playbooks, cases
          permissions:
            description: A list of permissions associated with this resource
            example: [create, read, update, delete, execute]
            type: array
            items:
              type: string
    
    Role:
        type: object
        required: [id]
        properties:
          id:
            type: integer
            minimum: 1
            description: id of the object
          name:
            description: Name of the role
            type: string
            example: administrative_role
          description:
            description: Description of the role
            type: string
            example: A user with this role can access any resource and has administrative-level privileges.
          resources:
            description: A list of resources that a user with this role can access
            example: [/users, /cases, /playbooks]
            type: array
            items:
              $ref: '#/components/schemas/Resource'
    
    Resource:
        type: object
        properties:
          id:
            type: integer
            minimum: 1
            description: ID of the object
          name:
            description: Name of the resource
            type: string
            example: playbooks, cases
          permissions:
            description: A list of permissions associated with this resource
            example: [create, read, update, delete, execute]
            type: array
            items:
              type: string
    
    AvailableResourceAction:
      type: object
      properties:
        name:
          type: string
          description: Name of the resource
          example: playbooks, cases
        actions:
          description: A list of actions or permissions available for this resource
          example: [create, read, update, delete]
          type: array
          items:
            type: string
        app_name:
          type: string
          description: The name of the app associated with this resource, if applicable
          example: HelloWorld, DailyQuote

    Scheduler:
      type: object
      required: [status]
      properties:
        status:
          description: State of trigger
          type: string
          example: 0 for stopped, 1 for running, 2 for paused, or a warning string
    
    AddScheduledTask:
      type: object
      required: [name]
      additionalProperties: false
      properties:
        workflows:
          description: List if IDs of workflows attached to this task
          type: array
          items:
            $ref: '#/components/schemas/Uuid'
        name:
          type: string
          description: Name of this task
        description:
          type: string
          description: description of this task
        status:
          type: string
          description: Status of the task
          enum: [running, stopped]
        task_trigger:
          $ref: '#/components/schemas/TaskTrigger'
    
    ScheduledTask:
      type: object
      required: [id]
      additionalProperties: false
      properties:
        id:
          type: integer
          description: ID of the object
        workflows:
          description: List if IDs of workflows attached to this task
          type: array
          items:
            $ref: '#/components/schemas/Uuid'
        name:
          type: string
          description: Name of this task
        description:
          type: string
          description: description of this task
        status:
          type: string
          description: Status of the task
          enum: [running, stopped]
        task_trigger:
          $ref: '#/components/schemas/TaskTrigger'
        action:
          type: string
          enum: [start, stop]
    
    TaskTrigger:
      type: object
      description: Scheduler to use.
      required: [args, type]
      properties:
        type:
          description: Type of scheduler trigger to use for this task
          type: string
          enum: [date, interval, cron]
          example: date
        args:
          type: object
          description: Arguments for the trigger.

    AddUser:
        type: object
        required: [username, password]
        properties:
          username:
            description: Username or email of the user
            type: string
            example: administrator
          password:
            description: Password for the user
            type: string
            example: password123
          roles:
            description: A list of role IDs that this user possesses. Roles can only be assigned to a User by an admin.
            $ref: '#/components/schemas/RoleIdList'
          active:
            description: activate/deactive a user. Active can only be changed by an admin.
            type: boolean
    
    EditUser:
        type: object
        required: [id]
        properties:
          id:
            description: Database id of the user
            type: integer
            example: 123
          username:
            description: New username or email of the user
            type: string
            example: administrator
          old_password:
            description: Previous password for the user
            type: string
            example: password123
          password:
            description: New password for the user
            type: string
            example: password321
          active:
            description: activate/deactive a user. Active can only be changed by an admin.
            type: boolean
          roles:
            description: A new list of role IDs that this user will possess. Roles can only be assigned by an admin.
            $ref: '#/components/schemas/RoleIdList'
    
    DisplayUser:
        type: object
        properties:
          id:
            description: Database id of the user
            type: integer
            example: 123
            readOnly: true
          username:
            description: Username or email of the user
            type: string
            example: administrator
          active:
            description: activate/deactive a user
            type: boolean
          roles:
            description: List of role object IDs that this user possesses
            type: array
            items:
              type: integer
    
    RoleIdList:
      type: array
      items:
        type: object
        required: [id]
        properties:
          id:
            type: integer
            description: The ID of a role the user posesses

    WorkflowStatus:
      type: object
      required: [execution_id, workflow_id, name, status]
      properties:
        execution_id:
          $ref: '#/components/schemas/Uuid'
        workflow_id:
          $ref: '#/components/schemas/Uuid'
        name:
          description: The name of the workflow.
          type: string
          example: WorkflowName
          readOnly: true
        status:
          description: The current status of the workflow
          type: string
          enum: ['pending', 'running', 'paused', 'awaiting_data', 'completed', 'aborted']
          readOnly: true
        started_at:
          description: The timestamp of the start of workflow execution
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
          readOnly: true
        completed_at:
          description: The timestamp of the end of workflow execution
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
        current_action:
          description: The currently executing action
          $ref: '#/components/schemas/ActionIdentification'
    
    FullWorkflowStatus:
      type: object
      required: [action_statuses, execution_id, workflow_id, name, status]
      properties:
        execution_id:
          $ref: '#/components/schemas/Uuid'
        workflow_id:
          $ref: '#/components/schemas/Uuid'
        name:
          description: The name of the workflow.
          type: string
          example: WorkflowName
          readOnly: true
        status:
          description: The current status of the workflow
          type: string
          enum: ['pending', 'running', 'paused', 'awaiting_data', 'completed', 'aborted']
          readOnly: true
        started_at:
          description: The timestamp of the start of workflow execution
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
          readOnly: true
        completed_at:
          description: The timestamp of the end of workflow execution
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
        action_statuses:
          description: The statuses of the workflow actions
          type: array
          items:
            $ref: '#/components/schemas/ActionStatus'
    
    ActionStatus:
      type: object
      description: The status of an action execution
      required: [action_id, execution_id, name, action_name, app_name, status, started_at]
      properties:
        execution_id:
          $ref: '#/components/schemas/Uuid'
        action_id:
          $ref: '#/components/schemas/Uuid'
        name:
          description: The name of the action
          type: string
          example: 'This One action'
          readOnly: true
        app_name:
          description: The name of the app associated with the action
          type: string
          example: ThingGetter
          readOnly: true
        action_name:
          description: The name of the action take by the action
          type: string
          example: get that thing
          readOnly: true
        status:
          description: The status of the workflow
          type: string
          enum: ['executing', 'awaiting_data', 'success', 'failure', 'aborted']
          readOnly: true
        result:
          description: The result of the action
          type: object
          readOnly: true
        started_at:
          description: The timestamp of when the action started
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
          readOnly: true
        completed_at:
          description: The timestamp of when the action completed
          type: string
          format: date-time
          example: '2017-05-24T00:43:26.930892Z'
          readOnly: true
    
    ActionIdentification:
      type: object
      description: The descriptive identification of an action
      required: [action_id, execution_id, name, action_name, app_name]
      properties:
        execution_id:
          $ref: '#/components/schemas/Uuid'
        action_id:
          $ref: '#/components/schemas/Uuid'
        name:
          description: The name of the action
          type: string
          example: 'This One action'
          readOnly: true
        app_name:
          description: The name of the app associated with the action
          type: string
          example: ThingGetter
          readOnly: true
        action_name:
          description: The name of the action take by the action
          type: string
          example: get that thing
          readOnly: true
    
    ActionStatusDetails:
      type: object
      required: [status, started_at]
      description: The details of an action execution
      properties:
        status:
          description: The status of the workflow
          type: string
          enum: ['executing', 'awaiting_data', 'success', 'failure', 'aborted']
          readOnly: true
        result:
          description: The result of the action
          type: object
          readOnly: true
        started_at:
          description: The timestamp of when the action started
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
          readOnly: true
        completed_at:
          description: The timestamp of when the action completed
          type: string
          format: date-time
          example: '2017-05-24T00:43:26.930892Z'
          readOnly: true
    
    ExecuteWorkflow:
      type: object
      required: [workflow_id]
      properties:
        workflow_id:
          $ref: '#/components/schemas/Uuid'
        start:
          description: The ID of the starting action
          $ref: '#/components/schemas/Uuid'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        workflow_variables:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowVariable'
    
    ControlWorkflow:
      type: object
      required: [execution_id, status]
      properties:
        execution_id:
          $ref: '#/components/schemas/Uuid'
        status:
          description: The action to take on the executing workflow
          type: string
          enum: ['pause', 'resume', 'abort']

  securitySchemes:
    AuthenticationToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: api_gateway.security.decode_token
      description: >
        We use a JWT authorization workflow. Use the /api/auth endpoint to get JWT access and refresh tokens. Then use the
        access token in the header "Authorization: Bearer accesstoken.goes.here".  That token will expire in 15 minutes by
        default. When it expires, you'll receive a 401 response code. At that point, use the /api/auth/refresh
        with the header "Authorization: Bearer refreshtoken.goes.here" to receive a fresh access token. When you're done,
        please use the /api/auth/logout endpoint to log out.  See the implementation in the Walkoff App for an example
        implementation.
