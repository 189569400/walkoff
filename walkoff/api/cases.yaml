/cases:
  get:
    tags:
      - Cases
    summary: Read all cases
    description: ''
    operationId: walkoff.server.endpoints.cases.read_all_cases
    produces:
      - application/json
    responses:
      200:
        description: Success
        schema:
          type: array
          items:
            $ref: '#/definitions/Case'
  post:
    tags:
      - Cases
    summary: Create or upload a case
    description: ''
    operationId: walkoff.server.endpoints.cases.create_case
    produces:
      - application/json
    consumes:
      - application/json
      - multipart/form-data
    parameters:
      - in: body
        name: body
        description: The name of the case to be created
        required: false
        schema:
          type: object
          properties:
            name:
              type: string
              example: Case_One
      - in: formData
        name: formData
        description: The case file to be imported
        required: false
        type: file
    responses:
      201:
        description: Object created
        schema:
          $ref: '#/definitions/Case'
      400:
        description: Case already exists.
        schema:
          $ref: '#/definitions/Error'
  put:
    tags:
      - Cases
    summary: Update a case
    description: ''
    operationId: walkoff.server.endpoints.cases.update_case
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Case'
    responses:
      200:
        description: Success
        schema:
          $ref: '#/definitions/Case'
      404:
        description: Case does not exist.
        schema:
          $ref: '#/definitions/Error'
  patch:
    tags:
      - Cases
    summary: Update a case
    description: ''
    operationId: walkoff.server.endpoints.cases.patch_case
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Case'
    responses:
      200:
        description: Success
        schema:
          $ref: '#/definitions/Case'
      404:
        description: Case does not exist.
        schema:
          $ref: '#/definitions/Error'
/cases/{case_id}:
  parameters:
    - name: case_id
      in: path
      description: The ID of the case
      required: true
      type: integer
    - in: query
      name: mode
      description: Specify mode as export to download the device file
      type: string
      required: false
  get:
    tags:
      - Cases
    summary: Read or download a case
    description: ''
    operationId: walkoff.server.endpoints.cases.read_case
    produces:
      - application/json
    responses:
      200:
        description: Success
        schema:
          $ref: '#/definitions/Case'
      404:
        description: Case does not exist.
        schema:
          $ref: '#/definitions/Error'
  delete:
    tags:
      - Cases
    summary: Remove a case
    description: ''
    operationId: walkoff.server.endpoints.cases.delete_case
    produces:
      - application/json
    responses:
      204:
        description: Success
      404:
        description: Case does not exist.
        schema:
          $ref: '#/definitions/Error'

/cases/{case_id}/events:
  parameters:
    - name: case_id
      in: path
      description: The ID of the case
      required: true
      type: integer
  get:
    tags:
      - Cases
    summary: Read all the events for a case
    description: ''
    operationId: walkoff.server.endpoints.cases.read_all_events
    produces:
      - application/json
    responses:
      200:
        description: Success
        schema:
          type: array
          items:
            $ref: '#/definitions/Event'
      404:
        description: Case does not exist.
        schema:
          $ref: '#/definitions/Error'
