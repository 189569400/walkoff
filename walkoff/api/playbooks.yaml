/playbooks:
  get:
    tags:
      - Playbooks
    summary: Read all playbooks
    description: ''
    operationId: walkoff.server.endpoints.playbooks.get_playbooks
    produces:
      - application/json
    parameters:
      - in: query
        name: full
        type: boolean
        required: false
    responses:
      200:
        description: Success
        schema:
          type: array
          items:
            $ref: '#/definitions/Playbook'
  post:
    tags:
      - Playbooks
    summary: Create a playbook
    description: ''
    operationId: walkoff.server.endpoints.playbooks.create_playbook
    consumes:
      - application/json
      - multipart/form-data
    produces:
      - application/json
    parameters:
      - in: query
        name: source
        description: The ID of the playbook to clone
        type: string
        required: false
        format: uuid
      - in: body
        name: body
        description: The playbook object to be created
        required: false
        schema:
          $ref: '#/definitions/CreatePlaybook'
      - in: formData
        name: formData
        description: The playbook file to be imported
        required: false
        type: file
    responses:
      201:
        description: Object created
        schema:
          $ref: '#/definitions/Playbook'
      400:
        description: Object exists
        schema:
          $ref: '#/definitions/Error'
  patch:
    tags:
      - Playbooks
    summary: Update a playbook
    description: ''
    operationId: walkoff.server.endpoints.playbooks.update_playbook
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: Fields of the playbook object to be updated
        required: true
        schema:
          $ref: '#/definitions/UpdatePlaybook'
    responses:
      200:
        description: Success
        schema:
          $ref: '#/definitions/Playbook'
      404:
        description: Playbook does not exist.
        schema:
          $ref: '#/definitions/Error'
      400:
        description: Playbook already exists.
        schema:
          $ref: '#/definitions/Error'

/playbooks/{playbook_id}:
  parameters:
    - name: playbook_id
      in: path
      description: The ID that needs to be fetched.
      required: true
      type: string
      format: uuid
    - in: query
      name: mode
      description: Specify mode as export to download the playbook file
      type: string
      required: false
  get:
    tags:
      - Playbooks
    summary: Read or download a playbook
    description: ''
    operationId: walkoff.server.endpoints.playbooks.read_playbook
    produces:
      - application/json
    responses:
      200:
        description: Success
        schema:
          $ref: '#/definitions/Playbook'
      404:
        description: Object does not exist.
        schema:
          $ref: '#/definitions/Error'
      400:
        description: Invalid input error.
        schema:
          $ref: '#/definitions/Error'
      515:
        description: I/O error.
        schema:
          $ref: '#/definitions/Error'
  delete:
    tags:
      - Playbooks
    summary: Delete a playbook
    description: ''
    operationId: walkoff.server.endpoints.playbooks.delete_playbook
    produces:
      - application/json
    responses:
      204:
        description: Success
      404:
        description: Playbook does not exist.
        schema:
          $ref: '#/definitions/Error'
      515:
        description: I/O error.
        schema:
          $ref: '#/definitions/Error'


/playbooks/{playbook_id}/workflows:
  parameters:
    - name: playbook_id
      in: path
      description: 'The ID that needs to be fetched. '
      required: true
      type: string
      format: uuid
  get:
    tags:
      - Playbooks
    summary: Read all workflows in playbook
    description: ''
    operationId: walkoff.server.endpoints.playbooks.get_workflows_for_playbook
    produces:
      - application/json
    responses:
      200:
        description: Success
        schema:
          type: array
          description: The JSON representation of all the workflows for the playbook
          items:
            $ref: '#/definitions/Workflow'
      404:
        description: Playbook does not exist.
        schema:
          $ref: '#/definitions/Error'

/workflows:
  get:
    tags:
      - Playbooks
    summary: Read all workflows in playbook
    description: ''
    operationId: walkoff.server.endpoints.playbooks.get_workflows
    produces:
      - application/json
    parameters:
      - in: query
        name: playbook
        description: The ID of the playbook whose workflows to get
        type: string
        required: false
        format: uuid
    responses:
      200:
        description: Success
        schema:
          type: array
          description: The JSON representation of all the workflows for the playbook
          items:
            $ref: '#/definitions/Workflow'
      404:
        description: Playbook does not exist.
        schema:
          $ref: '#/definitions/Error'
  post:
    tags:
      - Workflows
    summary: Create a workflow
    description: ''
    operationId: walkoff.server.endpoints.playbooks.create_workflow
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: query
        name: source
        description: The ID of the workflow to clone
        type: string
        format: uuid
        required: false
      - in: body
        name: body
        description: The workflow object to be created
        required: true
        schema:
          $ref: '#/definitions/CreateWorkflow'
    responses:
      201:
        description: Workflow created.
        schema:
          $ref: '#/definitions/Workflow'
      404:
        description: Playbook does not exist.
        schema:
          $ref: '#/definitions/Error'
      400:
        description: Workflow already exists.
        schema:
          $ref: '#/definitions/Error'
  put:
    tags:
      - Workflows
    summary: Update a workflow
    description: ''
    operationId: walkoff.server.endpoints.playbooks.update_workflow
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: The fields of the workflow object to be updated
        required: true
        schema:
          $ref: '#/definitions/Workflow'
    responses:
      200:
        description: Success
        schema:
          type: object
          required: [workflow]
          properties:
            workflow:
              $ref: '#/definitions/Workflow'
      404:
        description: Playbook or workflow does not exist.
        schema:
          $ref: '#/definitions/Error'
      400:
        description: Workflow already exists.
        schema:
          $ref: '#/definitions/Error'

/workflows/{workflow_id}:
  parameters:
    - name: workflow_id
      in: path
      description: 'The ID that needs to be fetched. '
      required: true
      type: string
      format: uuid
  get:
    tags:
      - Workflows
    summary: Read a workflow
    description: ''
    operationId: walkoff.server.endpoints.playbooks.read_workflow
    produces:
      - application/json
    responses:
      200:
        description: Success
        schema:
          $ref: '#/definitions/Workflow'
      404:
        description: Playbook or workflow does not exist.
        schema:
          $ref: '#/definitions/Error'

  delete:
    tags:
      - Workflows
    summary: Delete a workflow
    description: ''
    operationId: walkoff.server.endpoints.playbooks.delete_workflow
    produces:
      - application/json
    responses:
      204:
        description: Success
      404:
        description: Playbook or workflow does not exist.
        schema:
          $ref: '#/definitions/Error'

/uuid:
  get:
    tags:
      - Workflows
    summary: Get a new UUID
    description: ''
    operationId: walkoff.server.endpoints.playbooks.get_uuid
    produces:
      - application/json
    responses:
      201:
        description: Success
        schema:
          type: object
          required: [uuid]
          properties:
            uuid:
              $ref: '#/definitions/Uuid'
