version: '3.4'
services:
  umpire:
    image: localhost:5000/umpire:latest
    build:
      context: ./
      dockerfile: umpire/Dockerfile
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role==manager]
    depends_on:
      - redis

#  walkoff-registry:
#    restart: always
#    image: registry:latest
#    deploy:
#      placement:
#       constraints: [node.role==manager]
#    ports:
#      - 5000:5000
#    environment:
#      REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt
#      REGISTRY_HTTP_TLS_KEY: /certs/domain.key
#      REGISTRY_AUTH: htpasswd
#      REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
#      REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
#    volumes:
#      - ./data/config.yml:/etc/docker/registry/config.yml
#      - /path/data:/var/lib/registry
#      - /path/certs:/certs
#      - /path/auth:/auth


  worker:
    image: localhost:5000/worker:latest
    build:
      context: ./
      dockerfile: worker/Dockerfile
    depends_on:
      - redis

#  hello-world:
#    image: localhost:5000/hello-world:latest
#    build:
#      context: ./apps/HelloWorld/v1.0
#      dockerfile: Dockerfile
#    env_file:
#      - apps/HelloWorld/v1.0/env.txt
#    deploy:
#      mode: replicated
#      replicas: 6


#  test-app:
#    build:
#      context: ./apps/TestApp/v0.1.1/
#      dockerfile: Dockerfile
#    env_file:
#      - apps/TestApp/v0.1.1/env.txt
#    depends_on:
#      - redis

  redis:
    container_name: redis
    image: "redis"
    ports:
      - 6379:6379

#  postgres:
#    container_name: postgres
#    image: "postgres"
#    environment:
#    - "POSTGRES_USER=walkoff"
#    - "POSTGRES_PASSWORD=walkoff"
#    volumes:
#      - postgres_database:/var/lib/postgresql/data

#volumes:
#  postgres_database:

#networks:
#  walkoffnet:
